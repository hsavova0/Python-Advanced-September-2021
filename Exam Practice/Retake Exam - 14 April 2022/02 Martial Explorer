def is_invalid_position(size, row, col):
    if row < 0 or col < 0 or row >= size or col >= size:
        return True
    return False


mars_matrix = []
matrix_size = 6
rover_row, rover_col = 0, 0

water_deposit = 0
metal_deposit =  0
concrete_deposit = 0

for _ in range(matrix_size):
    el = input().split()
    mars_matrix.append(el)

for r in range(len(mars_matrix)):
    for c in range(len(mars_matrix[r])):
        if mars_matrix[r][c] == 'E':
            rover_row, rover_col = r, c

directions = input().split(', ')

while directions:
    direction = directions.pop(0)
    if direction == 'up':
        rover_row -= 1
        if is_invalid_position(matrix_size, rover_row, rover_col):
            rover_row = 5
            if is_invalid_position(matrix_size, rover_row, rover_col):
                rover_col = 0
                if mars_matrix[rover_row][rover_col] == 'W':
                    water_deposit += 1
                    print(f'Water deposit found at {rover_row, rover_col}')
                if mars_matrix[rover_row][rover_col] == 'M':
                    metal_deposit += 1
                    print(f'Metal deposit found at {rover_row, rover_col}')
                if mars_matrix[rover_row][rover_col] == 'C':
                    concrete_deposit += 1
                    print(f'Concrete deposit found at {rover_row, rover_col}')
                if mars_matrix[rover_row][rover_col] == 'R':
                    print(f'Rover got broken at {rover_row, rover_col}')
                    break
    elif direction == 'down':
        rover_row += 1
        if is_invalid_position(matrix_size, rover_row, rover_col):
            rover_row = 0
            if is_invalid_position(matrix_size, rover_row, rover_col):
                rover_col = 0
                if mars_matrix[rover_row][rover_col] == 'W':
                    water_deposit += 1
                    print(f'Water deposit found at {rover_row, rover_col}')
                if mars_matrix[rover_row][rover_col] == 'M':
                    metal_deposit += 1
                    print(f'Metal deposit found at {rover_row, rover_col}')
                if mars_matrix[rover_row][rover_col] == 'C':
                    concrete_deposit += 1
                    print(f'Concrete deposit found at {rover_row, rover_col}')
                if mars_matrix[rover_row][rover_col] == 'R':
                    print(f'Rover got broken at {rover_row, rover_col}')
                    break
    elif direction == 'left':
        rover_col -= 1
        if is_invalid_position(matrix_size, rover_row, rover_col):
            rover_col = 5
            if is_invalid_position(matrix_size, rover_row, rover_col):
                rover_col = 0
                if mars_matrix[rover_row][rover_col] == 'W':
                    water_deposit += 1
                    print(f'Water deposit found at {rover_row, rover_col}')
                if mars_matrix[rover_row][rover_col] == 'M':
                    metal_deposit += 1
                    print(f'Metal deposit found at {rover_row, rover_col}')
                if mars_matrix[rover_row][rover_col] == 'C':
                    concrete_deposit += 1
                    print(f'Concrete deposit found at {rover_row, rover_col}')
                if mars_matrix[rover_row][rover_col] == 'R':
                    print(f'Rover got broken at {rover_row, rover_col}')
                    break
    elif direction == 'right':
        rover_col += 1
        if is_invalid_position(matrix_size, rover_row, rover_col):
            rover_col = 0
            if mars_matrix[rover_row][rover_col] == 'W':
                water_deposit += 1
                print(f'Water deposit found at {rover_row, rover_col}')
            if mars_matrix[rover_row][rover_col]== 'M':
                metal_deposit += 1
                print(f'Metal deposit found at {rover_row, rover_col}')
            if mars_matrix[rover_row][rover_col] == 'C':
                concrete_deposit += 1
                print(f'Concrete deposit found at {rover_row, rover_col}')
            if mars_matrix[rover_row][rover_col] == 'R':
                print(f'Rover got broken at {rover_row, rover_col}')
                break
    current_position = mars_matrix[rover_row][rover_col]
    if current_position == 'W':
        water_deposit += 1
        print(f'Water deposit found at {rover_row, rover_col}')
    if current_position == 'M':
        metal_deposit += 1
        print(f'Metal deposit found at {rover_row, rover_col}')
    if current_position == 'C':
        concrete_deposit += 1
        print(f'Concrete deposit found at {rover_row, rover_col}')
    if current_position == 'R':
        print(f'Rover got broken at {rover_row, rover_col}')
        break

if water_deposit > 0 and metal_deposit > 0 and concrete_deposit > 0:
    print('Area suitable to start the colony.')
else:
    print('Area not suitable to start the colony.')

2nd variant: where is None comming from:
def is_outside_matrix(size, r, c, is_outside):
    if r < 0 or r > size or c < 0 or c > size:
        is_outside = True
    return is_outside


def new_position(new_row, new_col, direction):
    is_outside = False
    size_matrix = 5
    if direction == 'up':
        new_row -= 1
        is_outside = is_outside_matrix(size_matrix, new_row, new_col, is_outside)
        if is_outside:
            new_row = 5
    elif direction == 'down':
        new_row += 1
        is_outside = is_outside_matrix(size_matrix, new_row, new_col, is_outside)
        if is_outside:
            new_row = 0
    elif direction == 'left':
        new_col -= 1
        is_outside = is_outside_matrix(size_matrix, new_row, new_col, is_outside)
        if is_outside:
            new_col = 5
    elif direction == 'right':
        new_col += 1
        is_outside = is_outside_matrix(size_matrix, new_row, new_col, is_outside)
        if is_outside:
            new_col = 0
    return new_row, new_col


from collections import deque

size = 6
matrix = []

rover_rol, rover_col = 0, 0
is_suitable_for_life = False
is_broken = False
resources = {
    'W': 0,
    'M': 0,
    'C': 0,
}

for i in range(size):
    matrix.append(input().split())
    for j in range(len(matrix[i])):
        if matrix[i][j] == 'E':
            rover_rol, rover_col = i, j
commands = deque(input().split(', '))

while commands:
    command = commands.popleft()
    rover_rol, rover_col = new_position(rover_rol, rover_col, command)
    current_rover_position = matrix[rover_rol][rover_col]
    if current_rover_position == 'W':
        resources[current_rover_position] += 1
        print(f'Water deposit found at ({rover_rol}, {rover_col})')
    elif current_rover_position == 'M':
        resources[current_rover_position] += 1
        print(f'Metal deposit found at ({rover_rol}, {rover_col})')
    elif current_rover_position == 'C':
        resources[current_rover_position] += 1
        print(f'Concrete deposit found at ({rover_rol}, {rover_col})')
    elif current_rover_position == 'R':
        is_broken = True
        break

if is_broken:
    print(print(f'Rover got broken at ({rover_rol}, {rover_col})'))

for key, value in resources.items():
    if value > 0:
        is_suitable_for_life = True
    else:
        is_suitable_for_life = False

if is_suitable_for_life:
    print('Area suitable to start the colony.')
else:
    print('Area not suitable to start the colony.')
